package com.example.a11699.lib_greendao.db;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "mychat".
*/
public class ChatBeanDao extends AbstractDao<ChatBean, Long> {

    public static final String TABLENAME = "mychat";

    /**
     * Properties of entity ChatBean.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Sendid = new Property(1, String.class, "sendid", false, "sandid");
        public final static Property Receiveid = new Property(2, String.class, "receiveid", false, "receiveid");
        public final static Property Chatcontent = new Property(3, String.class, "chatcontent", false, "chatcontent");
    }


    public ChatBeanDao(DaoConfig config) {
        super(config);
    }
    
    public ChatBeanDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"mychat\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT UNIQUE ," + // 0: id
                "\"sandid\" TEXT," + // 1: sendid
                "\"receiveid\" TEXT," + // 2: receiveid
                "\"chatcontent\" TEXT);"); // 3: chatcontent
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"mychat\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, ChatBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sendid = entity.getSendid();
        if (sendid != null) {
            stmt.bindString(2, sendid);
        }
 
        String receiveid = entity.getReceiveid();
        if (receiveid != null) {
            stmt.bindString(3, receiveid);
        }
 
        String chatcontent = entity.getChatcontent();
        if (chatcontent != null) {
            stmt.bindString(4, chatcontent);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, ChatBean entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String sendid = entity.getSendid();
        if (sendid != null) {
            stmt.bindString(2, sendid);
        }
 
        String receiveid = entity.getReceiveid();
        if (receiveid != null) {
            stmt.bindString(3, receiveid);
        }
 
        String chatcontent = entity.getChatcontent();
        if (chatcontent != null) {
            stmt.bindString(4, chatcontent);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public ChatBean readEntity(Cursor cursor, int offset) {
        ChatBean entity = new ChatBean( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // sendid
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // receiveid
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // chatcontent
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, ChatBean entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setSendid(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setReceiveid(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setChatcontent(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(ChatBean entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(ChatBean entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(ChatBean entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
